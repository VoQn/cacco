
= cacco
Cacco is a programming language.
:toc:

image::https://circleci.com/gh/VoQn/cacco.png?circle-token=:circle-token[]

IMPORTANT: Cacco is still in the design stage. It's not working yet.

[[introduction]]
== Introduction

[[comment]]
=== Comment
----
;; This is inline comment (to the end of the line).

;/ This is block comment. ;;<1>
   block comment is keeping until the terminator -> /; ;; <2>

;/
  ;/ These block comments can be nested. /; ;;<3>
/;
----
<1> `;/` is the start of block comment
<2> `/;` is the end of block comment
<3> Block comments can be nested

[[literals]]
=== Literals
----
0     ;; Fuzzy Numeric.  (default: Natural)
-1 +1 ;; Fuzzy Integer.  (default: Integer)
0.0   ;; Fuzyy Decimal.  (default: Decimal)
1/2   ;; Rational.
'a'   ;; Charactor.      (same as Word32)
""    ;; Fuzzy Text.     (default: String_UTF8)
:key  ;; Keyword.
[]    ;; Fuzzy Sequence. (default: List)
{}    ;; Key-Value Map.
----

|===
|Fuzzy Types    | Include Types

|Fuzzy_Numeric  | Word8, Word16, Word32, Word64, Nat, and Fuzzy_Integer
|Fuzzy_Integer  | Int8, Int16, Int32, Int64, Integer, and Fuzzy_Decimal
|Fuzzy_Decimal  | Float16, Float32, Float64, Flonum
|Fuzzy_Text     | Bytes, String_UTF8, String_UTF16, String_UTF32
|Fuzzy_Sequence | List, Vector, Array, Sequence
|===

[[declaration-and-reassign]]
=== Declaration and Reassign
----
;; Declare procedure or value or variable.
(dec x Integer)

;; Define a constant value once.
(let x 1000)

;; Declare a mutable variable.
(var y 0)

;; Strictly typing with literal.
(let z (as 0 Word8))
(var w (as "something" Bytes))

;; Reassign
(set! y 1000)    ;; OK
(set! y "hello") ;; Can't. `y` has been declered as Number type.
(set! x 10)      ;; Can't. `x` has been declered as immutable.
----

[[calling-procedure]]
=== Calling procedure
----
;; Simply calling a procedure.
(foo a b c)

;; Calling closure.
((|a| (* a a)) 10) ;; returns 100
----

[[define-procedure]]
=== Define procedure
----
;; Declare a procedure
(dec cubic
  (forall |n| ;;<1>
    (as n Number)
    (-> n n))) ;;<2>

;; Define the procedure
(let cubic (|x| (* x x x)))
----
<1> `(forall |a b c ...| ...)` is Generic typing form.
<2> `(-> T1 T2 ... Tn)` is Function type recieve `T1`, `T2` ... then return value as `Tn` type.

[[development]]
== Development
[[prequisites]]
=== Prerequisites

* Haskell Stack

[[build-and-testing]]
=== Build and Testing

[[simply-building-libraries-and-application]]
==== Simply building libraries and application
[source,bash]
----
stack build
----

[[build-clean]]
==== Clean
[source,bash]
----
stack clean
----

[[run-tests]]
==== Run Tests
[source,bash]
----
# simply run test-suites
stack test

# run test-suites and generate coverage-report
stack clean && stack test --coverage
# open coverage-report in your browser
open $(stack path --local-hpc-root)/index.html
----
