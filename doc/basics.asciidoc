= Basics
Cacco Language Basics
v0.1.0, 2018-02-12
:toc:

[[Syntax]]
== Syntax

=== Comment
[source,cacco]
----
;; this is single line comment

(; this is block comment ;)
----

=== Declaration

----
;; declare a constant value
(: x Integer)

;; declare a simple function
(: not? (-> Bool Bool))

;; declare a variadic function
(: and? (-> Bool Bool ... Bool Bool))

;; declare a generic function
(: even? (: i Integral) (-> i Bool))
(: odd? (: i Integral) (-> i Bool))
----

=== Definition
----
(= x 10) ;; x is 10 as Integer

;; using if
(= (not? x) (if x false true))

;; using pattern match
(= (and? false _ ... _) false)
(= (and? _ false ... _) false)
(= (and? _ _ ... []) true)
(= (and? _ _ ... rest) (and? ... rest))

(= (even? x) (== (mod x 2) 0))

;; using function composition
(= odd? (. not? even?))
;; (= (odd? x) (not? (even? x)))
----

=== Apply
----
(+ 1 2 3 4) ;; 10

(and? true true) ;; true
(and? true true false) ;; false

(even? 2) ;; true
(even? 1) ;; false

(odd? 2) ;; false
(odd? 1) ;; true
----

=== Conditional branch

[[If_Expression]]
==== if (simple)

`if <prod> <then> <else>` is a special form.

1. At first, `<prod>` expression will be evaluated.
2. if `<prod>` result is ...
  a. `true` then `<then>` expression will be evaluated.
  b. `false` then `<else>` expression will be evaluated.

`<prod>` allow only an expression that will be a `Boolean` value.

----
(if true 0 1) ;; 0

(if false 0 1) ;; 1

(if true 0
    (error! "this won't be evaluated")) ;; 0

(if false 0
    (error! "this would be evaluated")) ;; error
----

[[Multiway_If]]
==== if (multiway)

other version `if` is `if [<prod> <then>] ... [else <else>]`

----
(: fizz-buzz (: i Integral) (-> i String))
(= (fizz-buzz x)
  (= (multiple? m) (== (mod x m) 0))
  (if
    [(multiple? 15) "FizzBuzz"]
    [(multiple?  3) "Fizz"    ]
    [(multiple?  5) "Buzz"    ]
    [else           (string x)]))

(fizz-buzz 1) ;; "1"
(fizz-buzz 3) ;; "Fizz"
(fizz-buzz 10) ;; "Buzz"
(fizz-buzz 30) ;; "FizzBuzz"
----

[[Lambda]]
== λ Expression

----
;; 1. usually lambda expression
((|x y| (- x y)) 10 20) ;; -10

;; 2. placeholder expression
((|- <> <>|) 10 20) ;; -10

((|list 1 <> 3 <...>|) 2 4 5 6 7 8 9) ;; [1 2 3 4 5 6 7 8 9]

;; 3. indexed placeholder expression
((|- <2> <1>|) 10 20) ;; 10

;; 4. with hole pattern
(= const (|x _| x))
(const 1 2) ;; 1

(= seq (|_ y| y))
(seq 1 2) ;; 2
----

[[Literals]]
== Literals and Primitive Types

[[Fuzzy_Types]]
=== Fuzzy_Type

cacco has `Fuzzy` types for literals.
[%header%, cols=3*]
|===
|Expression
|Fuzzy Type
|Default Type

|`0, 0b1010, 0o060, 0xF0A`
|`Fuzzy-Numeric`|`Natural`

|`-1, +1`
|`Fuzzy-Integer`|`Integer`

|`0.0, +1.0, -0.5, 1.0e5, 0x1.0p-126`
|`Fuzzy-Decimal`|`Flonum`

|`"", "Hello", "こんにちは", "你好", "🐟"`
|`Fuzzy-Text`|`String-UTF8`
|===

===== How to guess fuzzy literal

----
(= x 1)
;; ('-') cacco guess `x` is maybe Natural

(= y (/. x 2))
;; ('o') ! cacco changed their idea that `x` is Flonum
;; -- and the `y` is maybe same type.

(: z (-> Float32 Float32))
(= z (+ y y))
;; (0_0) !! cacco find `y` is strictly used as Float32.
;; -- and `x` too.
;;
;; Result
;; ------
;; ('-') < `x` and `y` are `Float32`
----

But, if this expression was wrote after lines, cacco cannot decide actual type.

----
(odd? x)
;; (?_?) cacco confused `x` is also used as some `Integral` type.
;; and then they will warn before evaluation.
----

For safe using, recommend to write type annotation and use converter.

----
;; rewrite version
(: x Integer)
(= x 1)

(: y Float32)
(= y
  (= x' (from-integer x))
  (/. x' 2))

(odd? x) ;; (^_^) OK
----

[[Strict_Types]]
=== Strict type literals

Of cause, cacco has strict type literals

[cols="2,1,3"]
|===
|Expression|Type|Description

|`true, false`|`Bool`|The boolean type
|`0_i8`|`Int8`|8bit integer
|`0_i16`|`Int16`|16bit integer
|`0_i32`|`Int32`|32bit integer
|`0_i64`|`Int64`|64bit integer
|`0_u8`|`Uint8`|8bit unsigned integer
|`0_u16`|`Uint16`|16bit unsigned integer
|`0_u32`|`Uint32`|32bit unsigned integer
|`0_u64`|`Uint64`|64bit unsigned integer
|`0_f16`|`Float16`|16bit floating point number (IEEE 754-2008 binary16)
|`0_f32`|`Float32`|32bit floating point number (IEEE 754-2008 binary32)
|`0_f64`|`Float64`|64bit floating point number (IEEE 754-2008 binary64)

|===
